160729________________________
https://www.codeschool.com/courses/shaping-up-with-angular-js
JSON pour recharger des éléments de la page, comme avec les applications mobiles qui consomment des APIs
directives: bind behaviors
modules
var app = angular.module('store', [ ]);
[ ] is for dependencies (here we have none)
expressions is to insert dynamic values into the HTML
wrap the JavaScrip in a closure is a good habit
controllers define our app's behavior by defining functions and values
<div ng-controller="StoreController as store">
ng-controller est la directive
StoreController le nom du controller
et store est l'alias
we have access to the properties INSIDE the div
the scope of the controller is only INSIDE the div
directives, comme ng-show="store.product.canPurchase" par exemple
AngularJS va interpréter le pas de valeur comme un false
ng-hide, ng-repeat
directives: HTML annotations that trigger JavaScript behaviors
modules: where our application components live
controllers: where we add application behavior
expressions: how values get displayed within the page
filters, directives, and cleaner code
directives: ng-app, ng-controller, ng-show/ng-hide, ng-repeat
pipe: send the output into
{{product.price | currency}}
formatting with filters: {{data | filter:options}}
date: {{'1388123412323' | date:'MM/dd/yyyy @ h:mma'}}
uppercase & lowercase: {{'octogon gem' | uppercase}}
limitTo: {{'My Description' | limitTo:8}}
aussi utile avec un ng-repeat: <li ng-repeat="product in store.products | limitTo:3">\
orderBy: <li ng-repeat="product in store.products | orderBy:'-price'">
le minus sign devant price c'est pour ordonner en mode descendant
pour les images, utiliser le ng-source directive
<img ng-src="{{product.images[0].full}}" />
<div class="gallery" ng-show="{{product.images.length}}">
length lorsqu'on a un array
ng-click directive
ng-model
ng-submit allows us to call a function when the form is submitted
form validations
turn off default HTML validation by adding the novalidate at the end of the form tag
mark required fields by adding the required attribute
<div>reviewForm is {{reviewForm.$valid}}</div>, $valid est built-in dans Angular (ça va avec)
default classes added in an input email: ng-pristine, ng-invalid, ng-dirty, ng-valid (ajoutées par défaut par Angular)
Angular has built-in validations for common input types: email, url, number (avec minimum et maximum)

expressions define a 2-way data binding: expressions are re-evaluated when a property changes!
<div class="panel" ng-show="tab === 1">... pour afficher le tab en question quand tab est à 1
the ng-init directive allows us to evaluate an expression in the current scope
<section ng-init="tab = 1">...
<li ng-class="{ active:tab === 1 }">... expression to evaluate, if true, set class to "active, otherwise nothing
panel controller to extraire la logique d'affichage
forms and models
ng-model binds the form element value to the property
ng is the core module and stands for Angular
custom directives
HTML snippets avec ng-include with simple quotes inside double quotes
using ng-include: <h3 ng-include="'product-title.html'"></h3>
custom directive: <product-title></product-title>
directives allow you to wirte HTML that expresses the behavior of your application
expressness with custom directives
app.directive('productTitle', function() {
	return {
		restrict: 'E', // type of the directive, E is for element
		templateUrl: 'product-title.html' // url of a template
	};
});
some browsers don't like self-closing tags when using custom elements, so we don't use them
restrict: 'A', // A for Attribute
with Angular, we can understand more directly what is the intent behing the HTML code
Element Directive: <product-title></product-title>
Attribute Directive: <h3 product-title></h3>
directive controllers
dependencies
modules
on extrait la logique des produits de app.js qu'on met dans products.js et on crée un module : var app = angular.module('store-products', [ ]);
different closure means different app variable (between app.js and products.js)
in the app.js file, on ajoute la dépendance pour faire le lien : var app = angular.module('store', ['store-products']);
et inclure le fichier products.js dans le head du HTML
split modules based on functionalities
services: remplir les tableaux à partir d'une API externe avec du JSON
built-in services: $http, $log, $filter
$http({ method: 'GET', url: '/products.json' });
$http.get('/products.json', { apiKey: 'myApiKey' });
both return a Promise object with .success() and .error()
the JSON is automatically decoded into JavaScript objects with Angular!
app.controller('SomeController', [ '$http', function($http){ // en fait c'est de la dependency injection!

} ]);